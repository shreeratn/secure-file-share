//filename: migrations
Error reading file: [Errno 21] Is a directory: 'migrations'

//filename: models.py
from django.db import models
from authentication.models import User

class File(models.Model):
    STATUS_CHOICES = (
        ('private', 'Private'),
        ('public', 'Public'),
    )

    name = models.CharField(max_length=255)
    file = models.FileField(upload_to='uploads/')
    extension = models.CharField(max_length=10)
    size = models.IntegerField()  # in bytes
    uploaded_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='uploaded_files')
    uploaded_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='private')
    download_link = models.CharField(max_length=255, null=True, blank=True)
    expiry_date = models.DateTimeField(null=True, blank=True)
    shared_with = models.ManyToManyField(User, related_name='shared_files', blank=True)

class UserStorage(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    used_storage = models.BigIntegerField(default=0)  # in bytes

    @property
    def allocated_storage(self):
        if self.user.user_type == 'admin':
            return 50 * 1024 * 1024 * 1024  # 50GB
        elif self.user.user_type == 'regular':
            return 1 * 1024 * 1024 * 1024   # 1GB
        return 500 * 1024 * 1024            # 500MB for guest


==================================================

//filename: serializers.py
from rest_framework import serializers
from .models import File, UserStorage
from datetime import timedelta, datetime, timezone


class FileSerializer(serializers.ModelSerializer):
    uploaded_by = serializers.SerializerMethodField()

    class Meta:
        model = File
        fields = ['id', 'name', 'size', 'extension', 'status', 'expiry_date', 'uploaded_date', 'download_link', 'uploaded_by']

    def get_uploaded_by(self, obj):
        return {
            'id': obj.uploaded_by.id,
            'name': obj.uploaded_by.first_name,
            'email': obj.uploaded_by.email
        }

class UserStorageSerializer(serializers.ModelSerializer):
    allocated_storage = serializers.ReadOnlyField()

    class Meta:
        model = UserStorage
        fields = ['used_storage', 'allocated_storage']

class FileUploadSerializer(serializers.ModelSerializer):
    file = serializers.FileField()
    expiry_days = serializers.IntegerField(min_value=1, max_value=30, default=7)

    class Meta:
        model = File
        fields = ['file', 'status', 'expiry_days']

    def create(self, validated_data):
        # Remove expiry_days from validated_data as it's not a model field
        expiry_days = validated_data.pop('expiry_days', 7)
        file_obj = validated_data.pop('file')

        # Create the file instance
        file_instance = File.objects.create(
            name=file_obj.name,
            file=file_obj,
            extension=file_obj.name.split('.')[-1],
            size=file_obj.size,
            uploaded_by=self.context['request'].user,
            status=validated_data.get('status', 'private'),
            expiry_date=datetime.now(timezone.utc) + timedelta(days=expiry_days)
        )

        return file_instance


==================================================

//filename: __init__.py


==================================================

//filename: __pycache__
Error reading file: [Errno 21] Is a directory: '__pycache__'

//filename: apps.py
from django.apps import AppConfig


class FilesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "files"


==================================================

//filename: admin.py
from django.contrib import admin

# Register your models here.


==================================================

//filename: tests.py
from django.test import TestCase

# Create your tests here.


==================================================

//filename: urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('user-data/', views.get_user_data, name='user-data'),
    path('uploaded-files/', views.get_uploaded_files, name='uploaded-files'),
    path('shared-files/', views.get_shared_files, name='shared-files'),
    path('upload/', views.upload_file, name='upload-file'),
    path('delete/<int:file_id>/', views.delete_file, name='delete-file'),
    path('share/<int:file_id>/', views.share_file, name='share-file'),
]


==================================================

//filename: views.py
from rest_framework import viewsets, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from datetime import datetime, timedelta, timezone
import uuid
from authentication.models import User  # Add this import
from .models import File, UserStorage
from .serializers import FileSerializer, UserStorageSerializer, FileUploadSerializer

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_data(request):
    user = request.user
    storage = UserStorage.objects.get_or_create(user=user)[0]

    data = {
        'total_files_shared': File.objects.filter(uploaded_by=user).count(),
        'used_storage': storage.used_storage,
        'allocated_storage': storage.allocated_storage,
        'current_role': user.user_type,
    }

    if user.user_type == 'admin':
        data.update({
            'incomplete_mfa': User.objects.filter(is_mfa_enabled=False).count(),
            'encryption_health': 100,  # Placeholder
            'failed_decryption_alerts': 0  # Placeholder
        })

    return Response(data)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_uploaded_files(request):
    files = File.objects.filter(uploaded_by=request.user)
    serializer = FileSerializer(files, many=True)
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_shared_files(request):
    files = File.objects.filter(shared_with=request.user).select_related('uploaded_by')
    serializer = FileSerializer(files, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def upload_file(request):
    # Check if user is guest
    if request.user.user_type == User.UserType.GUEST:
        return Response({
            'error': 'Guests cannot upload files'
        }, status=status.HTTP_403_FORBIDDEN)

    serializer = FileUploadSerializer(data=request.data, context={'request': request})
    if serializer.is_valid():
        file = request.FILES['file']

        # Set max file size based on user type (10MB for admin, 5MB for regular)
        max_size = 10485760 if request.user.user_type == User.UserType.ADMIN else 5242880
        if file.size > max_size:
            return Response({
                'error': f'File size exceeds limit. Maximum size allowed is {max_size/1048576}MB'
            }, status=status.HTTP_400_BAD_REQUEST)

        # Check user's storage limit
        storage = UserStorage.objects.get_or_create(user=request.user)[0]
        if storage.used_storage + file.size > storage.allocated_storage:
            return Response({
                'error': 'Storage limit exceeded'
            }, status=status.HTTP_400_BAD_REQUEST)

        try:
            # Create file record
            new_file = File.objects.create(
                name=file.name,
                file=file,
                extension=file.name.split('.')[-1],
                size=file.size,
                uploaded_by=request.user,
                status=serializer.validated_data.get('status', 'private'),
                expiry_date=datetime.now(timezone.utc) + timedelta(days=serializer.validated_data.get('expiry_days', 7))
            )

            # Generate download link for public files
            if new_file.status == 'public':
                new_file.download_link = str(uuid.uuid4())
                new_file.save()

            # Update user's storage usage
            storage.used_storage += file.size
            storage.save()

            return Response(
                FileSerializer(new_file).data,
                status=status.HTTP_201_CREATED
            )

        except Exception as e:
            return Response({
                'error': f'Error uploading file: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    return Response(
        serializer.errors,
        status=status.HTTP_400_BAD_REQUEST
    )

@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_file(request, file_id):
    try:
        file = File.objects.get(id=file_id, uploaded_by=request.user)
        file_size = file.size
        file.delete()

        # Update user's storage usage
        storage = UserStorage.objects.get(user=request.user)
        storage.used_storage -= file_size
        storage.save()

        return Response({'message': 'File deleted successfully'})
    except File.DoesNotExist:
        return Response({'error': 'File not found'}, status=status.HTTP_404_NOT_FOUND)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def share_file(request, file_id):
    try:
        file = File.objects.get(id=file_id, uploaded_by=request.user)
        emails = request.data.get('emails', [])

        for email in emails:
            try:
                user = User.objects.get(email=email)
                file.shared_with.add(user)
            except User.DoesNotExist:
                pass

        file.status = 'public'
        file.download_link = str(uuid.uuid4())
        file.save()

        return Response(FileSerializer(file).data)
    except File.DoesNotExist:
        return Response({'error': 'File not found'}, status=status.HTTP_404_NOT_FOUND)


==================================================

